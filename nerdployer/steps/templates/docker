---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AppParam:
    Description: App's name
    Type: String
  
  ProductParam:
    Description: Team's name
    Type: String
  
  EnvParam:
    Description: Environment's name
    Default: dev
    Type: String
    AllowedPattern: "(prod|qa|dev|ci)"
  
  ReleaseParam:
    Description: Release's name
    Type: String
  
  ProcessParam:
    Description: Process's name
    Default: api
    AllowedPattern: "(api|worker)"
    Type: String
  
  VpcIdParam:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC
  
  AllowedNetworkCIDRParam:
    Type: String
    Default: 10.0.0.0/8
    Description: Network CIDR that have access to the created instances
  
  AZsParam:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: AZs used in this stack
  
  ELBSubnetIDListParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet ids for the elb layer
    Default: ''
  
  AppSubnetIDListParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet ids for the app layer
 
  MinInstancesParam:
    Description: Min allocated instances for this application
    Type: Number
    Default: 1
  
  MaxInstancesParam:
    Description: Max allocated instances for this application
    Type: Number
    Default: 1
  
  InstanceTypeParam:
    Description: Instance type for the application
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hs1.8xlarge
    ConstraintDescription: must be a valid EC2 instance type
  
  DockerAMIParam:
    Type: AWS::EC2::Image::Id
    Description: Ubuntu docker ami with proper credentials that will be used
  
  DockerImageParam:
    Type: String
    Description: Docker image that will be pulled
  
  DockerEnvironmentVariablesParam:
    Type: String
    Description: Additional docker environment variables
    Default: ''
  
  KeyPairNameParam:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair that will be used
  
  InstanceProfileParam:
    Type: String
    Description: Custom instance profile
    Default: ''
  
  DockerPortParam:
    Type: Number
    Description: Port exposed in the docker image
    Default: 8080
  
  HealthCheckParam:
    Type: String
    Description: Health check protocol
    Default: TCP:8080
  
  DockerMaxFileLogParam:
    Type: Number
    Description: Maximum number of log files created by the container
    Default: 2
  
  DockerMaxSizeLogParam:
    Type: String
    Description: Maximum size of the log files created by the container
    Default: 1g
  
  AutoScalingGroupScheduleUpParam:
    Type: String
    Description: cron expression to scale up the resources
    Default: 0 8 * * 1-5
  
  AutoScalingGroupScheduleDownParam:
    Type: String
    Description: cron expression to scale down the resources
    Default: 0 0 * * 1-5

  AutoScalingGroupScheduledActionEnabledParam:
    Type: String
    Description: scheduled actions flag
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

  HostedZoneNameParam:
    Type: String
    Description: hosted zone name
    Default: vivareal.com.

  ApiDnsParam:
    Type: String
    Description: hosted zone id
    Default: 'nerdployer-test'

  RollingUpdateMaxBatchSizeParam:
    Type: Number
    Description: max batch size for autoscaling rolling updates
    Default: 1

Conditions:
  ApiCondition:
    Fn::Equals:
    - api
    - Ref: ProcessParam
  EmptyInstanceProfileCondition:
    Fn::Equals:
    - ''
    - Ref: InstanceProfileParam
  ScheduledActionConditionParam:
    Fn::Not:
    - Fn::Equals:
      - 'false'
      - Ref: AutoScalingGroupScheduledActionEnabledParam

Resources:
  
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: ApiCondition
    Properties:
      GroupDescription:
        Fn::Sub: Security group for the elb resources of the stack ${AWS::StackName}
      VpcId:
        Ref: VpcIdParam
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - sg
            - Ref: EnvParam
            - Ref: ProductParam
            - Ref: AppParam
            - Ref: ProcessParam
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: sg
  
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Security group for the application resources of the stack ${AWS::StackName}
      VpcId:
        Ref: VpcIdParam
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: AllowedNetworkCIDRParam
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - sg
            - Ref: EnvParam
            - Ref: ProductParam
            - Ref: AppParam
            - Ref: ProcessParam
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: sg
  
  ElbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ApiCondition
    Properties:
      GroupId:
        Fn::GetAtt:
        - AppSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId:
        Fn::GetAtt:
        - ELBSecurityGroup
        - GroupId
  
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: ApiCondition
    Properties:
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 8080
        Protocol: HTTP
      HealthCheck:
        Target:
          Ref: HealthCheckParam
        Interval: 30
        Timeout: 5
        HealthyThreshold: 3
        UnhealthyThreshold: 10
      SecurityGroups:
      - Ref: ELBSecurityGroup
      Subnets:
        Ref: ELBSubnetIDListParam
      CrossZone: 'true'
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: 30
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - lb
            - Ref: EnvParam
            - Ref: ProductParam
            - Ref: AppParam
            - Ref: ProcessParam
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: lb
  
  AppAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 70% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '5'
      Threshold: '70'
      AlarmActions:
      - Ref: AppScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AppAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  
  AppAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 30% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '5'
      Threshold: '30'
      AlarmActions:
      - Ref: AppScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AppAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  
  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  
  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'
  
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count:
          Ref: MinInstancesParam
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService:
          Ref: MinInstancesParam
        MaxBatchSize:
          Ref: RollingUpdateMaxBatchSizeParam
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
    Properties:
      LoadBalancerNames:
        Fn::If:
        - ApiCondition
        - - Ref: AppLoadBalancer
        - Ref: AWS::NoValue
      HealthCheckType:
        Fn::If:
        - ApiCondition
        - ELB
        - EC2
      HealthCheckGracePeriod: 600
      AvailabilityZones:
        Ref: AZsParam
      LaunchConfigurationName:
        Ref: AppLaunchConfiguration
      MinSize:
        Ref: MinInstancesParam
      MaxSize:
        Ref: MaxInstancesParam
      VPCZoneIdentifier:
        Ref: AppSubnetIDListParam
      TerminationPolicies:
      - ClosestToNextInstanceHour
      - OldestInstance
      - Default
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: EnvParam
            - Ref: ProductParam
            - Ref: AppParam
            - Ref: ProcessParam
            - Ref: ReleaseParam
        PropagateAtLaunch: 'true'
      - Key: Product
        Value:
          Ref: ProductParam
        PropagateAtLaunch: 'true'
      - Key: App
        Value:
          Ref: AppParam
        PropagateAtLaunch: 'true'
      - Key: Env
        Value:
          Ref: EnvParam
        PropagateAtLaunch: 'true'
      - Key: Process
        Value:
          Ref: ProcessParam
        PropagateAtLaunch: 'true'
      - Key: Release
        Value:
          Ref: ReleaseParam
        PropagateAtLaunch: 'true'

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          all:
          - docker
        docker:
          files:
            "/opt/docker/env.file":
              content:
                Ref: DockerEnvironmentVariablesParam
              user: root
              group: root
              mode: '664'
          commands:
            01runcontainer:
              command:
                Fn::Sub: >
                  docker run -d --env-file=/opt/docker/env.file
                  --network=host
                  --log-opt max-size=${DockerMaxSizeLogParam}
                  --log-opt max-file=${DockerMaxFileLogParam}
                  -p 8080:${DockerPortParam} ${DockerImageParam}
    Properties:
      ImageId:
        Ref: DockerAMIParam
      KeyName:
        Ref: KeyPairNameParam
      SecurityGroups:
      - Ref: AppSecurityGroup
      InstanceType:
        Ref: InstanceTypeParam
      IamInstanceProfile:
        Fn::If:
        - EmptyInstanceProfileCondition
        - Ref: AWS::NoValue
        - Ref: InstanceProfileParam
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            echo "starting: ${DockerImageParam} ${DockerPortParam}"
            cfn-init -v --stack ${AWS::StackName} --resource AppLaunchConfiguration --configsets all --region ${AWS::Region}
            cfn-signal -e $? --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}

  AppAutoScalingGroupScheduleUp:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledActionConditionParam
    Properties:
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      MaxSize:
        Ref: MaxInstancesParam
      MinSize:
        Ref: MinInstancesParam
      Recurrence:
        Ref: AutoScalingGroupScheduleUpParam
  
  AppAutoScalingGroupScheduleDown:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledActionConditionParam
    Properties:
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      MaxSize: 0
      MinSize: 0
      Recurrence:
        Ref: AutoScalingGroupScheduleDownParam

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: ApiCondition
    Properties:
      HostedZoneName:
        Ref: HostedZoneNameParam
      Comment:
        Fn::Sub: DNS for ${AppParam}-${ProductParam}-${EnvParam} - stack ${AWS::StackName}
      Name:
        Fn::Sub: ${ApiDnsParam}.${HostedZoneNameParam}
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - AppLoadBalancer
          - CanonicalHostedZoneNameID
        DNSName:
          Fn::GetAtt:
          - AppLoadBalancer
          - DNSName

Description: Nerdployer Docker Application Stack Template
