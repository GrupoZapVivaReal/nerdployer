---
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AppParam:
    Description: App's name
    Type: String
  
  ProductParam:
    Description: Team's name
    Type: String
    Default: 'datascience'
  
  EnvParam:
    Description: Environment's name
    Default: dev
    Type: String
    AllowedPattern: "(prod|qa|dev|ci)"
  
  ReleaseParam:
    Description: Release's name
    Type: String
  
  ProcessParam:
    Description: Process's name
    Default: api
    AllowedPattern: "(api|worker)"
    Type: String
  
  VpcIdParam:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC
  
  AllowedNetworkCIDRParam:
    Type: String
    Default: 10.0.0.0/8
    Description: Network CIDR that have access to the created instances
  
  AZsParam:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: AZs used in this stack
  
  ELBSubnetIDListParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet ids for the elb layer
  
  AppSubnetIDListParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet ids for the app layer
 
  MinInstancesParam:
    Description: Minimum initial allocated instances for this application (permanent if not scheduled action is disabled)
    Type: Number
    Default: 1
  
  MaxInstancesParam:
    Description: Maximum initial allocated instances for this application (permanent if not scheduled action is disabled)
    Type: Number
    Default: 2
  
  InstanceTypeParam:
    Description: Instance type for the application
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - hs1.8xlarge
    ConstraintDescription: must be a valid EC2 instance type
  
  DockerImageParam:
    Type: String
    Description: Docker image that will be pulled
  
  DockerEnvironmentVariablesParam:
    Type: String
    Description: Additional docker environment variables
    Default: '#my docker env file content'
  
  KeyPairNameParam:
    Type: AWS::EC2::KeyPair::KeyName
    Description: KeyPair that will be used
  
  DockerPortParam:
    Type: Number
    Description: Port exposed in the docker image
    Default: 8080
  
  HealthCheckParam:
    Type: String
    Description: Health check protocol
    Default: TCP:8080
  
  DockerMaxFileLogParam:
    Type: Number
    Description: Maximum number of log files created by the container
    Default: 2
  
  DockerMaxSizeLogParam:
    Type: String
    Description: Maximum size of the log files created by the container
    Default: 1g
  
  AutoScalingGroupScheduleUpParam:
    Type: String
    Description: cron expression to scale up the resources
    Default: 0 10 * * 1-5
  
  AutoScalingGroupScheduleDownParam:
    Type: String
    Description: cron expression to scale down the resources
    Default: 0 0 * * *

  AutoScalingGroupScheduledActionEnabledParam:
    Type: String
    Description: scheduled actions flag
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'

  HostedZoneNameParam:
    Type: String
    Description: hosted zone name
    Default: vivareal.io.

  ApiDnsParam:
    Type: String
    Description: hosted zone id
    Default: 'nerdployer-test'

  SpotBidPriceParam:
    Type: String
    Description: Optional spot instance bid price for AutoScaling EC2 (if UseSpotParam is enabled)
    Default: ''

  MinInstancesAutoScalingUpParam:
    Description: Min allocated instances in AutoScalingUp if scheduled
    Type: Number
    Default: 0

  MaxInstancesAutoScalingUpParam:
    Description: Max allocated instances in AutoScalingUp if scheduled
    Type: Number
    Default: 0

  MinInstancesAutoScalingDownParam:
    Description: Min allocated instances in AutoScalingDown if scheduled
    Type: Number
    Default: 0

  MaxInstancesAutoScalingDownParam:
    Description: Max allocated instances in AutoScalingDown if scheduled
    Type: Number
    Default: 0

  ScaleUpThresholdParam:
    Description: cpu threshold for scaling up 
    Type: Number
    Default: 70

  ScaleDownThresholdParam:
    Description: cpu threshold for scaling down 
    Type: Number
    Default: 30

  ScaleThresholdPeriodParam:
    Description: period in minutes for checking the thresholds
    Type: Number
    Default: 3

Mappings:
  RegionAmiMap:
    sa-east-1:
      ami: ami-15029879
    us-east-1:
      ami: ami-e86b84fe

Conditions:
  ApiCondition:
    Fn::Equals:
    - api
    - Ref: ProcessParam
  UseSpotCondition:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: SpotBidPriceParam
  ScheduledActionCondition:
    Fn::Not:
    - Fn::Equals:
      - 'false'
      - Ref: AutoScalingGroupScheduledActionEnabledParam

Resources:

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppRWAccessPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - s3:*
            - sqs:*
            - sns:*
            - elasticmapreduce:*
            - elasticloadbalancing:Describe*
            - iam:CreateRole
            - iam:PutRolePolicy
            - iam:CreateInstanceProfile
            - iam:AddRoleToInstanceProfile
            - iam:ListRoles
            - iam:GetPolicy
            - iam:GetInstanceProfile
            - iam:GetPolicyVersion
            - iam:AttachRolePolicy
            - iam:PassRole
            Resource: "*"

  AppProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: AppRole
  
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: ApiCondition
    Properties:
      GroupDescription:
        Fn::Sub: Security group for the elb resources of the stack ${AWS::StackName}
      VpcId:
        Ref: VpcIdParam
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Sub: sg-${EnvParam}-${ProductParam}-${AppParam}-${ProcessParam}
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: sg
  
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: Security group for the application resources of the stack ${AWS::StackName}
      VpcId:
        Ref: VpcIdParam
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: AllowedNetworkCIDRParam
      Tags:
      - Key: Name
        Value:
          Fn::Sub: sg-${EnvParam}-${ProductParam}-${AppParam}-${ProcessParam}
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: sg
  
  ElbSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ApiCondition
    Properties:
      GroupId:
        Fn::GetAtt:
        - AppSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId:
        Fn::GetAtt:
        - ELBSecurityGroup
        - GroupId
  
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: ApiCondition
    Properties:
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 8080
        Protocol: HTTP
      HealthCheck:
        Target:
          Ref: HealthCheckParam
        Interval: 30
        Timeout: 5
        HealthyThreshold: 3
        UnhealthyThreshold: 10
      SecurityGroups:
      - Ref: ELBSecurityGroup
      Subnets:
        Ref: ELBSubnetIDListParam
      CrossZone: 'true'
      Scheme: internal
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: 30
      Tags:
      - Key: Name
        Value:
          Fn::Sub: lb-${EnvParam}-${ProductParam}-${AppParam}-${ProcessParam}
      - Key: Product
        Value:
          Ref: ProductParam
      - Key: App
        Value:
          Ref: AppParam
      - Key: Env
        Value:
          Ref: EnvParam
      - Key: Process
        Value: lb
  
  AppAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > ${ScaleUpThresholdParam}% for ${ScaleThresholdPeriodParam} minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods:
        Ref: ScaleThresholdPeriodParam
      Threshold:
        Ref: ScaleUpThresholdParam
      AlarmActions:
      - Ref: AppScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AppAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  
  AppAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 
        Fn::Sub: Scale-down if CPU < ${ScaleDownThresholdParam}% for ${ScaleThresholdPeriodParam} minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods:
        Ref: ScaleThresholdPeriodParam
      Threshold:
        Ref: ScaleDownThresholdParam
      AlarmActions:
      - Ref: AppScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AppAutoScalingGroup
      ComparisonOperator: LessThanThreshold
  
  AppScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  
  AppScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'
  
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count:
          Ref: MinInstancesParam
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
    Properties:
      LoadBalancerNames:
        Fn::If:
        - ApiCondition
        - - Ref: AppLoadBalancer
        - Ref: AWS::NoValue
      HealthCheckType:
        Fn::If:
        - ApiCondition
        - ELB
        - EC2
      HealthCheckGracePeriod: 600
      AvailabilityZones:
        Ref: AZsParam
      LaunchConfigurationName:
        Ref: AppLaunchConfiguration
      MinSize:
        Ref: MinInstancesParam
      MaxSize:
        Ref: MaxInstancesParam
      VPCZoneIdentifier:
        Ref: AppSubnetIDListParam
      TerminationPolicies:
      - ClosestToNextInstanceHour
      - OldestInstance
      - Default
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${EnvParam}-${ProductParam}-${AppParam}-${ProcessParam}-${ReleaseParam}
        PropagateAtLaunch: 'true'
      - Key: Product
        Value:
          Ref: ProductParam
        PropagateAtLaunch: 'true'
      - Key: App
        Value:
          Ref: AppParam
        PropagateAtLaunch: 'true'
      - Key: Env
        Value:
          Ref: EnvParam
        PropagateAtLaunch: 'true'
      - Key: Process
        Value:
          Ref: ProcessParam
        PropagateAtLaunch: 'true'
      - Key: Release
        Value:
          Ref: ReleaseParam
        PropagateAtLaunch: 'true'

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          api:
          - docker
          - healthcheck
          worker:
          - docker
        docker:
          files:
            "/opt/docker/env.file":
              content:
                Ref: DockerEnvironmentVariablesParam
              user: root
              group: root
              mode: '664'
          commands:
            01runcontainer:
              command:
                Fn::Sub: >
                  docker run -d --env-file=/opt/docker/env.file
                  --network=host
                  --log-opt max-size=${DockerMaxSizeLogParam}
                  --log-opt max-file=${DockerMaxFileLogParam}
                  -p 8080:${DockerPortParam} ${DockerImageParam}
        healthcheck:
          files:
            "/opt/docker/healthcheck":
              content:
                Fn::If:
                - ApiCondition
                - Fn::Sub: |
                    #!/bin/bash -xe
                    state="\"UnknownStatus\""
                    instance_id=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)
                    until [ "$state" == "\"InService\"" ]; do
                      state=$(/usr/local/bin/aws elb describe-instance-health --load-balancer-name ${AppLoadBalancer} --region ${AWS::Region} --instances $instance_id --query InstanceStates[0].State);
                      sleep 10;
                    done
                - Ref: "AWS::NoValue"
              user: root
              group: root
              mode: '770'               
          commands:
            01healthcheck:
              command: "/opt/docker/healthcheck"
    Properties:
      ImageId: 
        Fn::FindInMap: [ RegionAmiMap, !Ref "AWS::Region", ami ]
      KeyName:
        Ref: KeyPairNameParam
      SpotPrice:
        !If [ UseSpotCondition, !Ref SpotBidPriceParam, !Ref "AWS::NoValue" ]
      SecurityGroups:
      - Ref: AppSecurityGroup
      InstanceType:
        Ref: InstanceTypeParam
      IamInstanceProfile:
        Ref: AppProfile
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            echo "running: ${DockerImageParam} ${DockerPortParam}"
            cfn-init -v --stack ${AWS::StackName} --resource AppLaunchConfiguration --configsets ${ProcessParam} --region ${AWS::Region}
            cfn-signal -e $? --stack ${AWS::StackName} --resource AppAutoScalingGroup --region ${AWS::Region}

  AppAutoScalingGroupScheduleUp:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledActionCondition
    Properties:
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      MaxSize:
        Ref: MaxInstancesAutoScalingUpParam
      MinSize:
        Ref: MinInstancesAutoScalingUpParam
      Recurrence:
        Ref: AutoScalingGroupScheduleUpParam
  
  AppAutoScalingGroupScheduleDown:
    Type: AWS::AutoScaling::ScheduledAction
    Condition: ScheduledActionCondition
    Properties:
      AutoScalingGroupName:
        Ref: AppAutoScalingGroup
      MaxSize:
        Ref: MaxInstancesAutoScalingDownParam
      MinSize:
        Ref: MinInstancesAutoScalingDownParam
      Recurrence:
        Ref: AutoScalingGroupScheduleDownParam

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: ApiCondition
    Properties:
      HostedZoneName:
        Ref: HostedZoneNameParam
      Comment:
        Fn::Sub: DNS for ${AppParam}-${ProductParam}-${EnvParam} - stack ${AWS::StackName}
      Name:
        Fn::Sub: ${ApiDnsParam}.${HostedZoneNameParam}
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - AppLoadBalancer
          - CanonicalHostedZoneNameID
        DNSName:
          Fn::GetAtt:
          - AppLoadBalancer
          - DNSName

Description: Nerdployer Docker Datascience Stack
